//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                       String                    @id() @default(uuid())
  name                     String?
  email                    String?                   @unique()
  pictureUrl               String?                   @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation          String?
  status                   UserStatus                @default(VERIFIED)
  globalRole               String                    @default("USER")
  /// @password
  /// @omit
  password                 String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt()
  pwaSubscriptions         PwaSubscription[]         @relation("user")
  conversationParticipants ConversationParticipant[] @relation("user")
  messages                 Message[]                 @relation("user")
  contacts                 Contact[]                 @relation("user")
  contactsAsContact        Contact[]                 @relation("contact")
  statuss                  Status[]                  @relation("user")
}

/// @@allow('all', true)
model Conversation {
  id                       String                    @id() @default(uuid())
  name                     String?
  type                     String?
  conversationParticipants ConversationParticipant[] @relation("conversation")
  messages                 Message[]                 @relation("conversation")
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ConversationParticipant {
  id             String        @id() @default(uuid())
  role           String?
  conversationId String
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Message {
  id             String        @id() @default(uuid())
  content        String?
  type           String?
  status         String?
  conversationId String
  conversation   Conversation? @relation(fields: [conversationId], references: [id], name: "conversation")
  userId         String
  user           User?         @relation(fields: [userId], references: [id], name: "user")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Contact {
  id        String   @id() @default(uuid())
  status    String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  contactId String
  contact   User?    @relation(fields: [contactId], references: [id], name: "contact")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Status {
  id        String   @id() @default(uuid())
  content   String?
  type      String?
  expiresAt String?
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
